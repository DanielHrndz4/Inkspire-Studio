// components/cart.tsx
import React, { useMemo } from "react";
import { Button } from "@/components/ui/button";
import { useCart } from "@/hooks/use-cart";
import { addOrder } from "@/lib/admin-store";

const CartSheet = () => {
  const { items, clear, setOpen } = useCart();

  const handleCheckout = () => {
    if (items.length === 0) return;
    const totalAmount = items.reduce((acc, i) => acc + i.price * i.qty, 0);
    addOrder({
      items,
      total: totalAmount,
      customer: undefined, // opcional: podrías pedir email en checkout
      status: "pagado",
    });
    clear();
    setOpen(false);
    alert("¡Gracias! Tu orden ha sido registrada.");
  };

  return (
    <div>
      {/* Cart content here */}
      <div className="flex justify-end">
        <Button className="w-full rounded-none h-11" disabled={items.length === 0} onClick={handleCheckout}>
          Finalizar compra
        </Button>
      </div>
    </div>
  );
};

export default CartSheet;

// app/categories/[slug]/page.tsx
import React, { useMemo } from "react";
import { getVisibilityMap } from "@/lib/admin-store";
import { useProducts } from "@/hooks/use-products";

const CategoryPage = ({ params }) => {
  const { products } = useProducts(params.slug);

  const baseItems = useMemo(() => products, [products]);
  const visibility = useMemo(() => getVisibilityMap(), []);

  const filteredItems = useMemo(() => {
    let items = baseItems;
    // visibilidad (oculta productos marcados como no visibles)
    items = items.filter((p) => visibility[p.slug] !== false);
    return items;
  }, [baseItems, visibility]);

  return (
    <div>
      {/* Category page content here */}
      {filteredItems.map((item) => (
        <div key={item.slug}>{item.name}</div>
      ))}
    </div>
  );
};

export default CategoryPage;

// app/products/page.tsx
import React, { useMemo } from "react";
import { getVisibilityMap } from "@/lib/admin-store";
import { useProducts } from "@/hooks/use-products";

const ProductPage = () => {
  const { products } = useProducts();
  const visibility = useMemo(() => getVisibilityMap(), []);

  const filtered = products.filter((p) => {
    const colorMatch = colors.length === 0 || p.colors.some((c) => colors.includes(c));
    const fabricMatch = fabrics.length === 0 || p.fabrics.some((f) => fabrics.includes(f));
    const visibleMatch = visibility[p.slug] !== false;
    return colorMatch && fabricMatch && visibleMatch;
  });

  return (
    <div>
      {/* Product page content here */}
      {filtered.map((product) => (
        <div key={product.slug}>{product.name}</div>
      ))}
    </div>
  );
};

export default ProductPage;
