"use client"

import Link from "next/link"
import { useState, useMemo, useEffect } from "react"
import { ShoppingBag, Search, Heart } from 'lucide-react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { useCart } from "@/components/cart"
import MegaMenu from "./mega-menu"
import MobileNav from "./mobile-nav"
import { useWishlist } from "@/components/wishlist"

export default function SiteHeader() {
  const { count, setOpen } = useCart()
  const [showSearch, setShowSearch] = useState(false)

  return (
    <header className="sticky top-0 z-40 bg-white/85 backdrop-blur supports-[backdrop-filter]:bg-white/75 border-b" style={{ borderColor: "#cdcbcc" }}>
      <div className="w-full text-center text-xs py-2">
        <span className="px-2">Envío gratis a partir de 120€ ·</span>
        <a href="/customize" className="underline underline-offset-4">Personaliza tu prenda</a>
      </div>
      <div className="container mx-auto px-4">
        <div className="h-16 flex items-center justify-between gap-3">
          {/* Left: Mobile menu + Logo */}
          <div className="flex items-center gap-3">
            <MobileNav />
            <Link href="/" className="font-semibold tracking-widest uppercase" style={{ color: "#262b33" }}>
              Inkspire Studio
            </Link>
          </div>

          {/* Center: Desktop Nav (mega) */}
          <MegaMenu />

          {/* Right: Search + Cart */}
          <div className="flex items-center gap-2">
            <div className="hidden md:flex items-center">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4" style={{ color: "#6a5d86" }} />
                <Input
                  placeholder="Buscar productos"
                  className="pl-9 w-[220px] rounded-none focus-visible:ring-2"
                  aria-label="Buscar"
                  style={{ outline: "none" }}
                />
              </div>
            </div>

            {/* Mobile search toggle */}
            <Button
              variant="ghost"
              size="icon"
              className="md:hidden"
              aria-label="Buscar"
              onClick={() => setShowSearch((s) => !s)}
            >
              <Search className="h-5 w-5" />
            </Button>

            <Button
              variant="ghost"
              size="icon"
              aria-label="Abrir carrito"
              onClick={() => setOpen(true)}
              className="relative"
            >
              <ShoppingBag className="h-5 w-5" />
              {count > 0 && (
                <span
                  className="absolute -right-1 -top-1 h-4 min-w-[16px] rounded-full px-1 text-[10px] leading-4 text-white text-center"
                  aria-label={`Carrito con ${count} ${count === 1 ? "artículo" : "artículos"}`}
                  style={{ backgroundColor: "#262b33" }}
                >
                  {count}
                </span>
              )}
            </Button>
          </div>
        </div>

        {/* Mobile search bar */}
        {showSearch && (
          <div className="pb-3 md:hidden">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4" style={{ color: "#6a5d86" }} />
              <Input
                placeholder="Buscar productos"
                className="pl-9 rounded-none focus-visible:ring-2"
                aria-label="Buscar"
                style={{ outline: "none" }}
              />
            </div>
          </div>
        )}
      </div>
    </header>
  )
}
"use client"

import Link from "next/link"
import { HoverCard, HoverCardContent, HoverCardTrigger } from "@/components/ui/hover-card"

type MenuItem = { label: string; href: string }
type MegaGroup = { title: string; items: MenuItem[] }

const camisasGroup: MegaGroup = {
  title: "Camisas",
  items: [
    { label: "Hombres", href: "/categories/camisas?audiencia=hombres" },
    { label: "Mujeres", href: "/categories/camisas?audiencia=mujeres" },
    { label: "Niños", href: "/categories/camisas?audiencia=niños" },
    { label: "Clásicas", href: "/categories/camisas" },
  ],
}

const hoodiesGroup: MegaGroup = {
  title: "Hoodies",
  items: [
    { label: "Hombres", href: "/categories/hoodies?audiencia=hombres" },
    { label: "Mujeres", href: "/categories/hoodies?audiencia=mujeres" },
    { label: "Niños", href: "/categories/hoodies?audiencia=niños" },
    { label: "Básicos", href: "/categories/hoodies" },
  ],
}

const tematicasGroup: MegaGroup = {
  title: "Temáticas",
  items: [
    { label: "Anime", href: "/categories/anime" },
    { label: "Carros", href: "/categories/carros" },
    { label: "Tipografía", href: "/categories/tipografia" },
  ],
}

function MegaColumn({ group }: { group: MegaGroup }) {
  return (
    <div className="min-w-[180px]">
      <div className="text-xs uppercase tracking-widest mb-3" style={{ color: "#6a5d86" }}>{group.title}</div>
      <ul className="grid gap-2">
        {group.items.map((it) => (
          <li key={it.href}>
            <Link
              href={it.href}
              className="text-sm transition-colors"
              style={{ color: "#262b33" }}
              onMouseEnter={(e) => ((e.currentTarget.style.color = "#ea6f49"))}
              onMouseLeave={(e) => ((e.currentTarget.style.color = "#262b33"))}
            >
              {it.label}
            </Link>
          </li>
        ))}
      </ul>
    </div>
  )
}

export default function MegaMenu() {
  return (
    <div className="hidden md:flex items-center gap-6 text-sm">
      <HoverCard openDelay={50} closeDelay={80}>
        <HoverCardTrigger asChild>
          <Link href="/categories/camisas" className="hover:underline underline-offset-4" style={{ textDecorationColor: "#ea6f49" }}>
            Camisas
          </Link>
        </HoverCardTrigger>
        <HoverCardContent
          align="start"
          className="w-auto p-6 rounded-md shadow-sm"
          style={{ background: "#ffffff", border: "1px solid #cdcbcc" }}
        >
          <div className="grid grid-cols-3 gap-8">
            <MegaColumn group={camisasGroup} />
            <MegaColumn group={tematicasGroup} />
            <div className="rounded-md overflow-hidden relative" style={{ background: "#cdcbcc" }}>
              <div className="aspect-[4/3]" />
              <div className="absolute inset-0 p-4 flex flex-col justify-end" style={{ background: "linear-gradient(0deg, rgba(38,43,51,0.5), transparent)" }}>
                <div className="text-xs uppercase tracking-widest opacity-80 text-white">Destacado</div>
                <div className="text-sm font-medium text-white">Classic White</div>
                <Link href="/product/camisa-classic-white" className="text-xs underline underline-offset-4 mt-1 text-white">
                  Ver producto
                </Link>
              </div>
            </div>
          </div>
        </HoverCardContent>
      </HoverCard>

      <HoverCard openDelay={50} closeDelay={80}>
        <HoverCardTrigger asChild>
          <Link href="/categories/hoodies" className="hover:underline underline-offset-4" style={{ textDecorationColor: "#ea6f49" }}>
            Hoodies
          </Link>
        </HoverCardTrigger>
        <HoverCardContent
          align="start"
          className="w-auto p-6 rounded-md shadow-sm"
          style={{ background: "#ffffff", border: "1px solid #cdcbcc" }}
        >
          <div className="grid grid-cols-3 gap-8">
            <MegaColumn group={hoodiesGroup} />
            <MegaColumn group={tematicasGroup} />
            <div className="rounded-md overflow-hidden relative" style={{ background: "#cdcbcc" }}>
              <div className="aspect-[4/3]" />
              <div className="absolute inset-0 p-4 flex flex-col justify-end" style={{ background: "linear-gradient(0deg, rgba(38,43,51,0.5), transparent)" }}>
                <div className="text-xs uppercase tracking-widest opacity-80 text-white">Destacado</div>
                <div className="text-sm font-medium text-white">Hoodie Black Premium</div>
                <Link href="/product/hoodie-black-premium" className="text-xs underline underline-offset-4 mt-1 text-white">
                  Ver producto
                </Link>
              </div>
            </div>
          </div>
        </HoverCardContent>
      </HoverCard>

      <Link href="/collection" className="hover:underline underline-offset-4" style={{ textDecorationColor: "#ea6f49" }}>
        Colección
      </Link>
      <Link href="/categories" className="hover:underline underline-offset-4" style={{ textDecorationColor: "#ea6f49" }}>
        Categorías
      </Link>
      <Link href="/customize" className="hover:underline underline-offset-4" style={{ textDecorationColor: "#ea6f49" }}>
        Personalizar
      </Link>
      <Link href="/services" className="hover:underline underline-offset-4" style={{ textDecorationColor: "#ea6f49" }}>
        Servicios
      </Link>
    </div>
  )
}
import { Truck, Wand2, BadgeCheck, Headphones } from 'lucide-react'

export default function FeatureStrip() {
  const items = [
    { icon: Truck, title: "Envío gratis", desc: "A partir de 120€" },
    { icon: Wand2, title: "Personalización total", desc: "Texto, imagen y color" },
    { icon: BadgeCheck, title: "Calidad premium", desc: "Materiales seleccionados" },
    { icon: Headphones, title: "Soporte 7 días", desc: "Te acompañamos en todo" },
  ]
  return (
    <section aria-label="Beneficios clave" className="border-y bg-white" style={{ borderColor: "#cdcbcc" }}>
      <div className="container mx-auto px-4 py-6 grid gap-4 sm:grid-cols-2 lg:grid-cols-4">
        {items.map(({ icon: Icon, title, desc }) => (
          <div key={title} className="flex items-center gap-3">
            <div className="h-9 w-9 rounded-full border flex items-center justify-center" style={{ borderColor: "#cdcbcc" }}>
              <Icon className="h-4 w-4" style={{ color: "#6a5d86" }} />
            </div>
            <div>
              <div className="text-sm font-medium" style={{ color: "#262b33" }}>{title}</div>
              <div className="text-xs" style={{ color: "#6a5d86" }}>{desc}</div>
            </div>
          </div>
        ))}
      </div>
    </section>
  )
}
export default function BrandGrid() {
  const brands = [
    { name: "CreatorHouse" },
    { name: "Bold Studio" },
    { name: "Linea Fine" },
    { name: "Mono Lab" },
    { name: "Arc & Co" },
    { name: "Paper Ink" },
  ]
  return (
    <section aria-label="Marcas y creadores que confían en nosotros" className="bg-white">
      <div className="container mx-auto px-4 py-10 grid gap-6">
        <div className="text-center">
          <p className="text-xs uppercase tracking-widest" style={{ color: "#6a5d86" }}>Con la confianza de creadores</p>
        </div>
        <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-6">
          {brands.map((b) => (
            <div
              key={b.name}
              className="h-12 rounded-md bg-white flex items-center justify-center text-xs tracking-widest"
              style={{ border: "1px solid #cdcbcc", color: "#262b33" }}
            >
              {b.name}
            </div>
          ))}
        </div>
      </div>
    </section>
  )
}
import { ImageIcon as ImgIcon, Type, Ruler, Check } from 'lucide-react'

export default function HowItWorks() {
  const steps = [
    { icon: Ruler, title: "Elige tu base", desc: "Camisa u hooodie, talla y color." },
    { icon: Type, title: "Añade texto/monograma", desc: "Tipografías limpias y elegantes." },
    { icon: ImgIcon, title: "Sube tu arte", desc: "Aceptamos JPG, PNG y SVG." },
    { icon: Check, title: "Revisión y envío", desc: "Validación de calidad y despacho." },
  ]
  return (
    <section aria-label="Cómo funciona" className="bg-white">
      <div className="container mx-auto px-4 py-12 grid gap-8">
        <header className="text-center grid gap-3">
          <div>
            <h2 className="text-xl md:text-2xl tracking-tight" style={{ color: "#262b33" }}>Personaliza en 3–4 pasos</h2>
            <div className="mx-auto mt-2 h-0.5 w-12" style={{ backgroundColor: "#ea6f49" }} />
          </div>
          <p className="text-sm" style={{ color: "#6a5d86" }}>Diseña, valida y recibe en casa.</p>
        </header>
        <div className="grid sm:grid-cols-2 lg:grid-cols-4 gap-6">
          {steps.map(({ icon: Icon, title, desc }) => (
            <div key={title} className="rounded-md p-5 bg-white" style={{ border: "1px solid #cdcbcc" }}>
              <div className="h-9 w-9 rounded-full flex items-center justify-center mb-3" style={{ border: "1px solid #cdcbcc" }}>
                <Icon className="h-4 w-4" style={{ color: "#6a5d86" }} />
              </div>
              <div className="text-sm font-medium" style={{ color: "#262b33" }}>{title}</div>
              <div className="text-sm" style={{ color: "#6a5d86" }}>{desc}</div>
            </div>
          ))}
        </div>
      </div>
    </section>
  )
}
import { ShieldCheck, Recycle, Sparkles, MessageSquare } from 'lucide-react'

export default function ValueProps() {
  const values = [
    { icon: ShieldCheck, title: "Garantía de satisfacción", desc: "Reimpresión si hay defectos." },
    { icon: Recycle, title: "Tintas eco", desc: "Procesos responsables con el ambiente." },
    { icon: Sparkles, title: "Control de calidad", desc: "Revisión manual antes del envío." },
    { icon: MessageSquare, title: "Atención rápida", desc: "WhatsApp y email en menos de 24h." },
  ]
  return (
    <section aria-label="Por qué elegirnos" className="bg-white">
      <div className="container mx-auto px-4 py-12 grid gap-6">
        <header className="text-center">
          <h2 className="text-xl md:text-2xl tracking-tight" style={{ color: "#262b33" }}>Más razones para elegir Inkspire</h2>
          <div className="mx-auto mt-2 h-0.5 w-12" style={{ backgroundColor: "#ea6f49" }} />
        </header>
        <div className="grid sm:grid-cols-2 lg:grid-cols-4 gap-6">
          {values.map(({ icon: Icon, title, desc }) => (
            <div key={title} className="rounded-md p-5 bg-white" style={{ border: "1px solid #cdcbcc" }}>
              <div className="h-9 w-9 rounded-full flex items-center justify-center mb-3" style={{ border: "1px solid #cdcbcc" }}>
                <Icon className="h-4 w-4" style={{ color: "#4377b0" }} />
              </div>
              <div className="text-sm font-medium" style={{ color: "#262b33" }}>{title}</div>
              <div className="text-sm" style={{ color: "#6a5d86" }}>{desc}</div>
            </div>
          ))}
        </div>
      </div>
    </section>
  )
}
"use client"

import { useActionState } from "react"
import { subscribeNewsletter } from "@/app/actions/newsletter"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"

export default function NewsletterForm() {
  const [state, action, pending] = useActionState(subscribeNewsletter, null)

  return (
    <section aria-label="Newsletter" className="bg-white">
      <div className="container mx-auto px-4 py-12">
        <div className="rounded-md p-6 md:p-8 grid gap-4 md:grid-cols-[1fr_auto] items-center bg-white" style={{ border: "1px solid #cdcbcc" }}>
          <div className="grid gap-1">
            <h3 className="text-lg md:text-xl tracking-tight" style={{ color: "#262b33" }}>Únete a Inkspire Studio</h3>
            <p className="text-sm" style={{ color: "#6a5d86" }}>Nuevos lanzamientos, ofertas y tips de diseño.</p>
          </div>
          <form action={action} className="flex gap-2 w-full md:w-auto">
            <Input
              type="email"
              name="email"
              required
              placeholder="tu@email.com"
              className="rounded-none md:w-[280px] focus-visible:ring-2"
              aria-label="Correo electrónico"
              style={{ outline: "none" }}
            />
            <Button
              type="submit"
              className="rounded-none"
              disabled={pending}
              style={{ backgroundColor: "#4377b0", color: "#ffffff" }}
            >
              {pending ? "Enviando..." : "Suscribirme"}
            </Button>
          </form>
          {state && (
            <p className="text-sm" style={{ color: state.ok ? "#2e7d32" : "#ea6f49" }}>{state.message}</p>
          )}
        </div>
      </div>
    </section>
  )
}
import Image from "next/image"
import Link from "next/link"
import { type Category } from "@/lib/categories"

type Props = {
  categories: Category[]
  title?: string
  subtitle?: string
}

export default function CategorySpotlight({ categories, title = "Capítulos", subtitle = "Explora por categoría como si fuera una galería" }: Props) {
  return (
    <section aria-label="Categorías destacadas" className="bg-white">
      <div className="container mx-auto px-4 py-12 grid gap-6">
        <header className="grid gap-1">
          <h2 className="text-xl md:text-2xl tracking-tight" style={{ color: "#262b33" }}>{title}</h2>
          <p className="text-sm" style={{ color: "#6a5d86" }}>{subtitle}</p>
          <div className="h-0.5 w-12" style={{ backgroundColor: "#ea6f49" }} />
        </header>
        <div className="grid md:grid-cols-3 gap-6">
          {categories.map((cat) => (
            <Link
              key={cat.slug}
              href={`/categories/${cat.slug}`}
              className="group relative overflow-hidden rounded-md ring-1 ring-transparent transition"
              style={{ transitionTimingFunction: "ease" }}
              onMouseEnter={(e) => (e.currentTarget.style.boxShadow = "0 0 0 3px rgba(205,203,204,0.6)")}
              onMouseLeave={(e) => (e.currentTarget.style.boxShadow = "none")}
            >
              <div className="relative aspect-[3/4] w-full">
                <Image
                  src={cat.image || "/placeholder.svg?height=1200&width=900&query=categoria%20editorial"}
                  alt={cat.title}
                  fill
                  className="object-cover transition-transform duration-700 group-hover:scale-[1.03]"
                />
              </div>
              <div className="absolute inset-0" style={{ background: "linear-gradient(0deg, rgba(38,43,51,0.6), rgba(0,0,0,0) 60%)" }} />
              <div className="absolute bottom-0 left-0 p-6 text-white">
                <div className="text-xs uppercase tracking-widest opacity-80">Capítulo</div>
                <div className="text-2xl font-light">{cat.title}</div>
                {cat.description ? <div className="text-sm opacity-80 mt-1">{cat.description}</div> : null}
              </div>
            </Link>
          ))}
        </div>
      </div>
    </section>
  )
}
import Image from "next/image"
import Link from "next/link"
import SiteHeader from "@/components/site-header"
import SiteFooter from "@/components/site-footer"
import ProductCard from "@/components/product-card"
import { Button } from "@/components/ui/button"
import { products } from "@/lib/data"
import { CartProvider } from "@/components/cart"
import FeatureStrip from "@/components/feature-strip"
import BrandGrid from "@/components/brand-grid"
import HowItWorks from "@/components/how-it-works"
import Testimonials from "@/components/testimonials"
import NewsletterForm from "@/components/newsletter-form"
import InstagramGrid from "@/components/instagram-grid"
import { categories } from "@/lib/categories"
import LocationSection from "@/components/location-section"
import FAQ from "@/components/faq"
import ValueProps from "@/components/value-props"
import WhatsAppFab from "@/components/whatsapp-fab"

export default function Page() {
  const featuredCats = categories.slice(0, 3)

  return (
    <CartProvider>
      <div className="flex min-h-[100dvh] flex-col bg-white">
        <SiteHeader />
        <main className="flex-1">
          {/* Hero */}
          <section className="relative">
            <div className="relative aspect-[21/9] w-full overflow-hidden bg-muted">
              <Image
                src="/images/hero-1.png"
                alt="Inkspire Studio - personalización premium"
                fill
                priority
                className="object-cover"
              />
              <div className="absolute inset-0" style={{ background: "linear-gradient(0deg, rgba(38,43,51,0.7), rgba(255,255,255,0.08) 50%, transparent)" }} />
              <div className="absolute inset-0 flex items-end">
                <div className="container mx-auto px-4 py-12 md:py-16">
                  <div className="max-w-xl grid gap-4">
                    <h1 className="text-3xl md:text-5xl font-light tracking-tight text-white">
                      Inkspire Studio — Personaliza tu estilo
                    </h1>
                    <p className="text-sm md:text-base text-white/85">
                      Camisas y hoodies personalizados con calidad de estudio. Diseña, aprueba y recibe en casa.
                    </p>
                    <div className="flex gap-3">
                      <Link href="/customize">
                        <Button
                          className="rounded-none h-11 px-8"
                          style={{ backgroundColor: "#ea6f49", color: "#ffffff" }}
                        >
                          Personalizar ahora
                        </Button>
                      </Link>
                      <Link href="/products">
                        <Button
                          variant="outline"
                          className="rounded-none h-11 px-8 bg-transparent"
                          style={{ borderColor: "#262b33", color: "#262b33", backgroundColor: "transparent" }}
                          onMouseEnter={(e) => {
                            e.currentTarget.style.backgroundColor = "rgba(205,203,204,0.3)"
                          }}
                          onMouseLeave={(e) => {
                            e.currentTarget.style.backgroundColor = "transparent"
                          }}
                        >
                          Ver colección
                        </Button>
                      </Link>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>

          <FeatureStrip />
          <BrandGrid />

          {/* Categorías destacadas */}
          <section className="container mx-auto px-4 py-12 md:py-16 grid gap-6">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-xl md:text-2xl tracking-tight" style={{ color: "#262b33" }}>Compra por categoría</h2>
                <div className="mt-2 h-0.5 w-12" style={{ backgroundColor: "#ea6f49" }} />
              </div>
              <Link href="/categories" className="text-sm hover:underline underline-offset-4" style={{ color: "#4377b0" }}>
                Ver todas
              </Link>
            </div>
            <div className="grid md:grid-cols-3 gap-6">
              {featuredCats.map((cat) => (
                <Link key={cat.slug} href={`/categories/${cat.slug}`} className="group relative overflow-hidden rounded-md">
                  <div className="relative aspect-[16/9] w-full">
                    <Image src={cat.image || "/placeholder.svg?height=900&width=1600&query=categoria"} alt={cat.title} fill className="object-cover" />
                  </div>
                  <div className="absolute inset-0" style={{ background: "linear-gradient(0deg, rgba(38,43,51,0.6), transparent)" }} />
                  <div className="absolute bottom-0 left-0 p-6 text-white tracking-wide">
                    <div className="text-sm uppercase">{cat.title}</div>
                    {cat.description ? <div className="font-medium">{cat.description}</div> : null}
                  </div>
                </Link>
              ))}
            </div>
          </section>

          {/* Productos */}
          <section className="container mx-auto px-4 py-12 md:py-16 grid gap-6">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-xl md:text-2xl tracking-tight" style={{ color: "#262b33" }}>Nuevos esenciales</h2>
                <div className="mt-2 h-0.5 w-12" style={{ backgroundColor: "#ea6f49" }} />
              </div>
              <Link href="/products" className="text-sm hover:underline underline-offset-4" style={{ color: "#4377b0" }}>
                Comprar ahora
              </Link>
            </div>
            <div className="grid sm:grid-cols-2 lg:grid-cols-4 gap-6">
              {products.slice(0, 4).map((p) => (
                <ProductCard key={p.id} product={p} />
              ))}
            </div>
          </section>

          <HowItWorks />
          <ValueProps />

          {/* Banda servicios */}
          <section className="relative">
            <div className="relative aspect-[21/9] w-full overflow-hidden bg-muted">
              <Image src="/images/hero-2.png" alt="Servicios de diseño Inkspire Studio" fill className="object-cover" />
              <div className="absolute inset-0" style={{ background: "rgba(38,43,51,0.5)" }} />
              <div className="absolute inset-0 flex items-center">
                <div className="container mx-auto px-4">
                  <div className="max-w-2xl text-white grid gap-4">
                    <h3 className="text-2xl md:text-3xl font-light">¿Necesitas un diseño a medida?</h3>
                    <p className="text-sm md:text-base text-white/85">
                      Nuestro equipo te ayuda con branding, ilustración y piezas listas para imprimir.
                    </p>
                    <Link href="/services">
                      <Button className="rounded-none h-11 px-8" style={{ backgroundColor: "#4377b0", color: "#ffffff" }}>
                        Solicitar cotización
                      </Button>
                    </Link>
                  </div>
                </div>
              </div>
            </div>
          </section>

          {/* Ubicación, testimonios, grid, newsletter, FAQ */}
          <LocationSection />
          <Testimonials />
          <InstagramGrid />
          <NewsletterForm />
          <FAQ />
        </main>
        <SiteFooter />
      </div>
      <WhatsAppFab />
    </CartProvider>
  )
}
"use client"

import Image from "next/image"
import Link from "next/link"

type Tile =
  | { type: "image"; src: string; alt: string }
  | { type: "link"; src: string; alt: string; href: string; label: string; kicker?: string }

type Props = {
  tiles: Tile[]
  title?: string
  subtitle?: string
}

export default function EditorialGrid({
  tiles,
  title = "Exhibición · Edición 01",
  subtitle = "Una curaduría de prendas como arte",
}: Props) {
  return (
    <section aria-label="Exhibición editorial" className="bg-white">
      <div className="container mx-auto px-4 py-12 grid gap-6">
        <header className="grid gap-2">
          <h2 className="text-xl md:text-2xl tracking-tight" style={{ color: "#262b33" }}>
            {title}
          </h2>
          <p className="text-sm" style={{ color: "#6a5d86" }}>{subtitle}</p>
          <div className="h-0.5 w-12" style={{ backgroundColor: "#ea6f49" }} />
        </header>
        <div className="grid grid-cols-2 md:grid-cols-6 auto-rows-[10px] gap-4">
          {tiles.map((t, i) => {
            const spans =
              i % 8 === 0
                ? "md:col-span-3 md:row-span-[24]"
                : i % 5 === 0
                ? "md:col-span-2 md:row-span-[18]"
                : "md:col-span-1 md:row-span-[12]"

            return (
              <div
                key={i}
                className={`relative col-span-2 ${spans} overflow-hidden rounded-md bg-white ring-1`}
                style={{ borderColor: "#cdcbcc" as any }}
              >
                {t.type === "image" ? (
                  <>
                    <Image src={t.src || "/placeholder.svg"} alt={t.alt} fill className="object-cover" />
                    <div className="absolute inset-0 bg-gradient-to-t from-[#262b33]/20 to-transparent" />
                  </>
                ) : (
                  <Link href={t.href} className="group block w-full h-full">
                    <Image
                      src={t.src || "/placeholder.svg"}
                      alt={t.alt}
                      fill
                      className="object-cover transition-transform duration-700 group-hover:scale-[1.03]"
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-[#262b33]/50 via-[#262b33]/20 to-transparent" />
                    <div className="absolute bottom-0 left-0 p-4">
                      {t.kicker ? (
                        <div className="text-xs uppercase tracking-widest" style={{ color: "#ea6f49" }}>
                          {t.kicker}
                        </div>
                      ) : null}
                      <div className="text-base font-medium text-white drop-shadow-sm">{t.label}</div>
                    </div>
                    <div
                      className="absolute inset-0 pointer-events-none opacity-0 group-hover:opacity-100 transition-opacity"
                      style={{ boxShadow: "inset 0 0 0 3px rgba(234,111,73,0.45)" }}
                    />
                  </Link>
                )}
              </div>
            )
          })}
        </div>
      </div>
    </section>
  )
}
"use client"

import Image from "next/image"
import Link from "next/link"
  import SiteHeader from "@/components/site-header"
  import SiteFooter from "@/components/site-footer"
  import CategorySpotlight from "@/components/category-spotlight"
  import EditorialGrid from "@/components/editorial-grid"
  import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
  import ProductCard from "@/components/product-card"
  import { CartProvider } from "@/components/cart"
  import { categories } from "@/lib/categories"
  import { products } from "@/lib/data"
import { useEffect } from "react"
import { useSearchParams, useRouter } from "next/navigation"

  const TABS = [
    { key: "all", label: "Todo" },
    { key: "camisas", label: "Camisas" },
    { key: "hoodies", label: "Hoodies" },
    { key: "anime", label: "Anime" },
    { key: "carros", label: "Carros" },
    { key: "tipografia", label: "Tipografía" },
  ] as const

  export default function CollectionPage() {
    const topCats = categories.slice(0, 3)

    const tiles = [
      { type: "link", src: "/images/categories/camisas.png", alt: "Camisas", href: "/categories/camisas", label: "Camisas", kicker: "Capítulo" },
      { type: "image", src: "/lookbook-inkspire-1.png", alt: "Editorial 1" },
      { type: "link", src: "/images/categories/hoodies.png", alt: "Hoodies", href: "/categories/hoodies", label: "Hoodies", kicker: "Capítulo" },
      { type: "image", src: "/lookbook-inkspire-2.png", alt: "Editorial 2" },
      { type: "link", src: "/images/categories/anime.png", alt: "Anime", href: "/categories/anime", label: "Anime", kicker: "Temática" },
      { type: "image", src: "/lookbook-inkspire-3.png", alt: "Editorial 3" },
      { type: "link", src: "/images/categories/cars.png", alt: "Carros", href: "/categories/carros", label: "Carros", kicker: "Temática" },
      { type: "image", src: "/lookbook-inkspire-4.png", alt: "Editorial 4" },
    ] as const

    return (
      <CartProvider>
        <div className="flex min-h-[100dvh] flex-col bg-white">
          <SiteHeader />
          <main className="flex-1">
            {/* Hero curatorial */}
            <section className="relative">
              <div className="relative aspect-[16/7] w-full overflow-hidden bg-muted">
                <Image
                  src="/images/hero-2.png"
                  alt="Colección Inkspire — Exposición de prendas"
                  fill
                  priority
                  className="object-cover"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-[#262b33]/60 via-[#262b33]/20 to-transparent" />
                <div className="absolute inset-0 flex items-end">
                  <div className="container mx-auto px-4 py-10 md:py-16">
                    <div className="max-w-2xl text-white grid gap-4">
                      <div className="text-xs uppercase tracking-widest opacity-90" style={{ color: "#cdcbcc" }}>Colección</div>
                      <h1 className="text-3xl md:text-5xl font-light tracking-tight">
                        Prendas como arte
                      </h1>
                      <p className="text-sm md:text-base text-white/85">
                        Una selección curada de camisas y hoodies. Capítulos y temáticas que celebran el diseño.
                      </p>
                      <div className="flex gap-4">
                        <Link href="/customize" className="underline underline-offset-4" style={{ textDecorationColor: "#ea6f49" }}>
                          Personalizar
                        </Link>
                        <Link href="/categories" className="underline underline-offset-4" style={{ textDecorationColor: "#4377b0" }}>
                          Ver categorías
                        </Link>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </section>

            {/* Capítulos: categorías en gran formato */}
            <CategorySpotlight
              categories={topCats}
              title="Capítulos"
              subtitle="Camisas, Hoodies y Temáticas seleccionadas"
            />

            {/* Exhibición editorial (mosaico con paleta) */}
            <EditorialGrid tiles={tiles as any} />

            {/* Lookbook horizontal con paleta */}
            <section aria-label="Lookbook" className="bg-white">
              <div className="container mx-auto px-4 py-12 grid gap-6">
                <header className="grid gap-2">
                  <h2 className="text-xl md:text-2xl tracking-tight" style={{ color: "#262b33" }}>Lookbook</h2>
                  <p className="text-sm" style={{ color: "#6a5d86" }}>Explora la colección en formato editorial</p>
                  <div className="h-0.5 w-12" style={{ backgroundColor: "#ea6f49" }} />
                </header>
                <div className="overflow-x-auto">
                  <div className="flex gap-4 snap-x snap-mandatory">
                    {[
                      "/lookbook-inkspire-1.png",
                      "/lookbook-inkspire-2.png",
                      "/lookbook-inkspire-3.png",
                      "/lookbook-inkspire-4.png",
                      "/lookbook-inkspire-5.png",
                      "/lookbook-inkspire-6.png",
                    ].map((src, i) => (
                      <div
                        key={i}
                        className="relative snap-center w-[70vw] sm:w-[40vw] lg:w-[28vw] aspect-[3/4] rounded-md overflow-hidden bg-white ring-1"
                        style={{ borderColor: "#cdcbcc" as any }}
                      >
                        <Image src={src || "/placeholder.svg"} alt={`Lookbook ${i + 1}`} fill className="object-cover" />
                        <div className="absolute inset-0 bg-gradient-to-t from-[#262b33]/25 to-transparent" />
                        <div className="absolute bottom-2 left-2 h-1 w-8" style={{ backgroundColor: i % 2 === 0 ? "#4377b0" : "#ea6f49" }} />
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </section>

            {/* Productos por categoría (Tabs con paleta) */}
            <section aria-label="Piezas destacadas" className="bg-white">
              <div className="container mx-auto px-4 py-12 grid gap-6">
                <header className="grid gap-2">
                  <h2 className="text-xl md:text-2xl tracking-tight" style={{ color: "#262b33" }}>Piezas destacadas</h2>
                  <p className="text-sm" style={{ color: "#6a5d86" }}>Filtra por tipo o temática</p>
                </header>

                <Tabs defaultValue="all" className="w-full">
                  <TabsList className="grid w-full grid-cols-6 rounded-none bg-white border data-[state=active]:bg-transparent"
                    style={{ borderColor: "#cdcbcc" as any }}
                  >
                    {TABS.map((t) => (
                      <TabsTrigger
                        key={t.key}
                        value={t.key}
                        className="rounded-none text-xs md:text-sm border transition-colors data-[state=active]:text-white hover:bg-[#cdcbcc]/30 focus-visible:ring-2"
                        style={{
                          borderColor: "#cdcbcc",
                          color: "#262b33",
                        }}
                        // Nota: Tailwind permite valores arbitrarios; usamos clases para el estado activo
                      >
                        <span className="block data-[state=active]:hidden">{t.label}</span>
                        <span className="hidden data-[state=active]:block px-2 py-0.5 rounded-sm"
                              style={{ backgroundColor: "#262b33" }}>
                          {t.label}
                        </span>
                      </TabsTrigger>
                    ))}
                  </TabsList>

                  {TABS.map((t) => {
                    const list = t.key === "all" ? products : products.filter((p) => (p.tags ?? []).includes(t.key))
                    return (
                      <TabsContent key={t.key} value={t.key} className="mt-6">
                        <div className="grid sm:grid-cols-2 lg:grid-cols-4 gap-6">
                          {list.map((p) => (
                            <ProductCard key={p.id} product={p} />
                          ))}
                          {list.length === 0 && (
                            <p className="text-sm" style={{ color: "#6a5d86" }}>No hay piezas en esta categoría por ahora.</p>
                          )}
                        </div>
                      </TabsContent>
                    )
                  })}
                </Tabs>
              </div>
            </section>
          </main>
          <SiteFooter />
        </div>
      </CartProvider>
    )
  }
"use client"

import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Input } from "@/components/ui/input"
import { useEffect, useState } from "react"
import { Button } from "@/components/ui/button"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { usePathname, useRouter, useSearchParams } from "next/navigation"

interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[]
  data: TData[]
  pageParamKey?: string
  perPageParamKey?: string
  initialPageSize?: number
}

export function PaginatedGrid<TData, TValue>({
  columns,
  data,
  pageParamKey = "page",
  perPageParamKey = "per_page",
  initialPageSize = 24,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = useState<SortingState>([])
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([])
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({})
  const [rowSelection, setRowSelection] = useState({})
  const [perPage, setPerPage] = useState(initialPageSize)
  const searchParams = useSearchParams()
  const pathname = usePathname()
  const router = useRouter()

  const page = Number(searchParams.get(pageParamKey) || 1)

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    onSortingChange: setSorting,
    getSortedRowModel: getSortedRowModel(),
    onColumnFiltersChange: setColumnFilters,
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
  })

  useEffect(() => {
    const params = new URLSearchParams(searchParams.toString())
    if (perPage !== initialPageSize) params.set(perPageParamKey, String(perPage))
    else params.delete(perPageParamKey)
    router.replace(`${pathname}?${params.toString()}`)
  }, [perPage, pathname, router, searchParams, pageParamKey, perPageParamKey, initialPageSize])

  useEffect(() => {
    // Build from current URL to preserve other params (e.g. q, audiencia)
    const params = new URLSearchParams(typeof window !== "undefined" ? window.location.search : "")
    if (page > 1) params.set(pageParamKey, String(page))
    else params.delete(pageParamKey)

    if (perPage !== initialPageSize) params.set(perPageParamKey, String(perPage))
    else params.delete(perPageParamKey)

    const nextUrl = `${pathname}${params.toString() ? `?${params}` : ""}`
    const currentUrl = typeof window !== "undefined" ? `${window.location.pathname}${window.location.search}` : ""

    if (nextUrl !== currentUrl) {
      window.history.replaceState(null, "", nextUrl)
    }
  }, [page, perPage, pathname, pageParamKey, perPageParamKey, initialPageSize])

  return (
    <div className="w-full">
      <div className="flex items-center py-4">
        <Input
          placeholder="Filtrar columnas..."
          value={(table.getColumn(table.getAllColumns()[0].id)?.getFilterValue() as string) ?? ""}
          onChange={(event) =>
            table.getColumn(table.getAllColumns()[0].id)?.setFilterValue(event.target.value)
          }
          className="max-w-sm"
        />
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" className="ml-auto bg-transparent">
              Columnas
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            {table
              .getAllColumns()
              .filter((column) => column.getCanHide())
              .map((column) => {
                return (
                  <DropdownMenuCheckboxItem
                    key={column.id}
                    checked={column.getIsVisible()}
                    onCheckedChange={(value) => column.toggleVisibility(value)}
                  >
                    {column.id}
                  </DropdownMenuCheckboxItem>
                )
              })}
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => {
                  return (
                    <TableHead key={header.id}>
                      {header.isPlaceholder
                        ? null
                        : (
                          <div
                            onClick={header.column.getToggleSortingHandler()}
                            className="cursor-pointer"
                          >
                            {flexRender(
                              header.column.columnDef.header,
                              header.getContext()
                            )}
                            {{
                              ascending: "▲",
                              descending: "▼",
                            }[header.column.getIsSorted() as string] ?? null}
                          </div>
                        )}
                    </TableHead>
                  )
                })}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows.map((row) => (
              <TableRow key={row.id}>
                {row.getVisibleCells().map((cell) => (
                  <TableCell key={cell.id}>
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </TableCell>
                ))}
              </TableRow>
            ))}
            {table.getRowModel().rows.length === 0 ? (
              <TableRow>
                <TableCell colSpan={columns.length} className="text-center">
                  No se encontraron resultados.
                </TableCell>
              </TableRow>
            ) : null}
          </TableBody>
        </Table>
      </div>
      <div className="flex items-center justify-between space-x-2 py-2">
        <Select value={String(perPage)} onValueChange={(v) => setPerPage(Number(v))}>
          <SelectTrigger>
            <SelectValue placeholder="Resultados por página" />
          </SelectTrigger>
          <SelectContent>
            {[10, 24, 48, 96].map((n) => (
              <SelectItem key={n} value={String(n)}>{n}</SelectItem>
            ))}
          </SelectContent>
        </Select>
        <div className="flex-1 text-sm text-muted-foreground">
          {table.getFilteredRowModel().rows.length} de {data.length} resultados
        </div>
        <div className="space-x-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.setPageIndex(0)}
            disabled={!table.getCanPreviousPage()}
          >
            Primera
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
          >
            Anterior
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
          >
            Siguiente
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.setPageIndex(table.getPageCount() - 1)}
            disabled={!table.getCanNextPage()}
          >
            Última
          </Button>
        </div>
      </div>
    </div>
  )
}
"use client"

import { Product } from "@/lib/data"
import { PaginatedGrid } from "@/components/paginated-grid"
import { ColumnDef } from "@tanstack/react-table"
import { formatCurrency } from "@/lib/utils"

interface Props {
  products: Product[]
}

export default function ProductTable({ products }: Props) {
  const columns: ColumnDef<Product>[] = [
    {
      accessorKey: "name",
      header: "Nombre",
    },
    {
      accessorKey: "price",
      header: "Precio",
      cell: ({ row }) => formatCurrency(row.getValue("price")),
    },
    {
      accessorKey: "category",
      header: "Categoría",
    },
    {
      accessorKey: "tags",
      header: "Tags",
      cell: ({ row }) => (row.getValue("tags") ?? []).join(", "),
    },
  ]

  return (
    <PaginatedGrid columns={columns} data={products} />
  )
}
"use client"

import { ProductTable } from "@/components/product-table"
import { products } from "@/lib/data"
import { Metadata } from "next"
import { notFound } from "next/navigation"
import { Category } from "@/lib/categories"
import { CategorySpotlight } from "@/components/category-spotlight"
import { SiteHeader } from "@/components/site-header"
import SiteFooter from "@/components/site-footer"
import { CartProvider } from "@/components/cart"
import { useEffect, useState, useMemo } from "react"
import { useSearchParams, useRouter, usePathname } from "next/navigation"
import PriceRange from "@/components/price-range"
import WhatsAppFab from "@/components/whatsapp-fab"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

interface Props {
  params: { slug: string }
  searchParams: { q?: string; audiencia?: string; sort?: string }
}

export async function generateMetadata({ params }: { params: { slug: string } }): Promise<Metadata> {
  return {
    title: `Categoría: ${params.slug}`,
  }
}

async function getCategory(slug: string): Promise<Category | undefined> {
  const { categories } = await import("@/lib/categories")
  return categories.find((c) => c.slug === slug)
}

export default async function CategoryPage({ params, searchParams }: Props) {
  const { slug } = params
  const { q, audiencia, sort } = searchParams

  const category = await getCategory(slug)
  if (!category) {
    return notFound()
  }

  const filteredProducts = products.filter((p) => p.category === category.title)
  const topCats = []

    const pathname = usePathname()

    useEffect(() => {
      const params = new URLSearchParams()
      if (q) params.set("q", q)
      if (audiencia) params.set("audiencia", audiencia)
      if (sort && sort !== "relevance") params.set("sort", sort)

      const nextUrl = `${pathname}${params.toString() ? `?${params}` : ""}`
      const currentUrl = typeof window !== "undefined" ? `${window.location.pathname}${window.location.search}` : ""

      if (nextUrl !== currentUrl) {
        window.history.replaceState(null, "", nextUrl)
      }
    }, [q, audiencia, sort, pathname])

  return (
    <CartProvider>
      <div className="flex min-h-[100dvh] flex-col bg-white">
        <SiteHeader />
        <main className="flex-1">
          <section className="relative">
            <div className="relative aspect-[16/7] w-full overflow-hidden bg-muted">
              <img
                src={category.image || "/placeholder.svg"}
                alt={category.title}
                fill
                className="object-cover"
                style={{ objectPosition: "top" }}
              />
              <div className="absolute inset-0 bg-gradient-to-t from-[#262b33]/60 via-[#262b33]/20 to-transparent" />
              <div className="absolute inset-0 flex items-end">
                <div className="container mx-auto px-4 py-10 md:py-16">
                  <div className="max-w-2xl text-white grid gap-4">
                    <div className="text-xs uppercase tracking-widest opacity-90" style={{ color: "#cdcbcc" }}>Capítulo</div>
                    <h1 className="text-3xl md:text-5xl font-light tracking-tight">
                      {category.title}
                    </h1>
                    {category.description ? (
                      <p className="text-sm md:text-base text-white/85">
                        {category.description}
                      </p>
                    ) : null}
                    <div className="flex gap-4">
                      <a href="/customize" className="underline underline-offset-4" style={{ textDecorationColor: "#ea6f49" }}>
                        Personalizar
                      </a>
                      <a href="/collection" className="underline underline-offset-4" style={{ textDecorationColor: "#4377b0" }}>
                        Ver colección
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>

          {/* Capítulos: categorías en gran formato */}
          <CategorySpotlight
            categories={topCats}
            title="Más capítulos"
            subtitle="Explora otras categorías"
          />

          {/* Listado de productos */}
          <section aria-label="Piezas destacadas" className="bg-white">
            <div className="container mx-auto px-4 py-12 grid gap-6">
              <header className="grid gap-2">
                <h2 className="text-xl md:text-2xl tracking-tight" style={{ color: "#262b33" }}>Piezas destacadas</h2>
                <p className="text-sm" style={{ color: "#6a5d86" }}>Filtrar y ordenar</p>
              </header>
              <ProductTable products={filteredProducts} />
            </div>
          </section>
        </main>
        <SiteFooter />
      </div>
      <WhatsAppFab />
    </CartProvider>
  )
}
"use client"

import Image from "next/image"
import Link from "next/link"
import SiteHeader from "@/components/site-header"
import SiteFooter from "@/components/site-footer"
import ProductCard from "@/components/product-card"
import { Button } from "@/components/ui/button"
import { products } from "@/lib/data"
import { CartProvider } from "@/components/cart"
import FeatureStrip from "@/components/feature-strip"
import BrandGrid from "@/components/brand-grid"
import HowItWorks from "@/components/how-it-works"
import Testimonials from "@/components/testimonials"
import NewsletterForm from "@/components/newsletter-form"
import InstagramGrid from "@/components/instagram-grid"
import { categories } from "@/lib/categories"
import LocationSection from "@/components/location-section"
import FAQ from "@/components/faq"
import ValueProps from "@/components/value-props"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import PriceRange from "@/components/price-range"
import WhatsAppFab from "@/components/whatsapp-fab"
import RecentlyViewed from "@/components/recently-viewed"

export default function Page() {
  const [colors, setColors] = useState<string[]>([])
  const [fabrics, setFabrics] = useState<string[]>([])
  const [q, setQ] = useState("")
  const [sort, setSort] = useState<string>("relevance")

  const visibleProducts = products

  const [minPrice, maxPrice] = useMemo(() => {
    if (visibleProducts.length === 0) return [0, 0]
    const prices = visibleProducts.map((p) => p.price)
    return [Math.min(...prices), Math.max(...prices)]
  }, [visibleProducts])
  const [priceRange, setPriceRange] = useState<[number, number]>([minPrice, maxPrice])

  useEffect(() => { setPriceRange([minPrice, maxPrice]) }, [minPrice, maxPrice])

  const filtered = useMemo(() => {
    let list = visibleProducts.filter((p) => {
      const colorMatch = colors.length === 0 || p.colors.some((c) => colors.includes(c))
      const fabricMatch = fabrics.length === 0 || p.fabrics.some((f) => fabrics.includes(f))
      const priceOK = p.price >= priceRange[0] && p.price <= priceRange[1]
      const term = q.trim().toLowerCase()
      const qOK = !term || p.title.toLowerCase().includes(term) || p.description.toLowerCase().includes(term)
      return colorMatch && fabricMatch && priceOK && qOK
    })
    if (sort === "price-asc") list = [...list].sort((a, b) => a.price - b.price)
    else if (sort === "price-desc") list = [...list].sort((a, b) => b.price - a.price)
    return list
  }, [visibleProducts, colors, fabrics, priceRange, q, sort])

  const featuredCats = categories.slice(0, 3)

  return (
    <CartProvider>
      <div className="flex min-h-[100dvh] flex-col bg-white">
        <SiteHeader />
        <main className="flex-1">
          {/* Hero */}
          <section className="relative">
            <div className="relative aspect-[21/9] w-full overflow-hidden bg-muted">
              <Image
                src="/images/hero-1.png"
                alt="Inkspire Studio - personalización premium"
                fill
                priority
                className="object-cover"
              />
              <div className="absolute inset-0" style={{ background: "linear-gradient(0deg, rgba(38,43,51,0.7), rgba(255,255,255,0.08) 50%, transparent)" }} />
              <div className="absolute inset-0 flex items-end">
                <div className="container mx-auto px-4 py-12 md:py-16">
                  <div className="max-w-xl grid gap-4">
                    <h1 className="text-3xl md:text-5xl font-light tracking-tight text-white">
                      Inkspire Studio — Personaliza tu estilo
                    </h1>
                    <p className="text-sm md:text-base text-white/85">
                      Camisas y hoodies personalizados con calidad de estudio. Diseña, aprueba y recibe en casa.
                    </p>
                    <div className="flex gap-3">
                      <Link href="/customize">
                        <Button
                          className="rounded-none h-11 px-8"
                          style={{ backgroundColor: "#ea6f49", color: "#ffffff" }}
                        >
                          Personalizar ahora
                        </Button>
                      </Link>
                      <Link href="/products">
                        <Button
                          variant="outline"
                          className="rounded-none h-11 px-8 bg-transparent"
                          style={{ borderColor: "#262b33", color: "#262b33", backgroundColor: "transparent" }}
                          onMouseEnter={(e) => {
                            e.currentTarget.style.backgroundColor = "rgba(205,203,204,0.3)"
                          }}
                          onMouseLeave={(e) => {
                            e.currentTarget.style.backgroundColor = "transparent"
                          }}
                        >
                          Ver colección
                        </Button>
                      </Link>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>

          <FeatureStrip />
          <BrandGrid />

          {/* Categorías destacadas */}
          <section className="container mx-auto px-4 py-12 md:py-16 grid gap-6">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-xl md:text-2xl tracking-tight" style={{ color: "#262b33" }}>Compra por categoría</h2>
                <div className="mt-2 h-0.5 w-12" style={{ backgroundColor: "#ea6f49" }} />
              </div>
              <Link href="/categories" className="text-sm hover:underline underline-offset-4" style={{ color: "#4377b0" }}>
                Ver todas
              </Link>
            </div>
            <div className="grid md:grid-cols-3 gap-6">
              {featuredCats.map((cat) => (
                <Link key={cat.slug} href={`/categories/${cat.slug}`} className="group relative overflow-hidden rounded-md">
                  <div className="relative aspect-[16/9] w-full">
                    <Image src={cat.image || "/placeholder.svg?height=900&width=1600&query=categoria"} alt={cat.title} fill className="object-cover" />
                  </div>
                  <div className="absolute inset-0" style={{ background: "linear-gradient(0deg, rgba(38,43,51,0.6), transparent)" }} />
                  <div className="absolute bottom-0 left-0 p-6 text-white tracking-wide">
                    <div className="text-sm uppercase">{cat.title}</div>
                    {cat.description ? <div className="font-medium">{cat.description}</div> : null}
                  </div>
                </Link>
              ))}
            </div>
          </section>

          <section className="container mx-auto px-4 py-12 md:py-16 grid gap-6">
            <div className="grid md:grid-cols-[280px_1fr] gap-8">
              <aside className="hidden md:block">
                <div className="grid gap-2 mb-4">
                  <Label htmlFor="q" className="text-xs uppercase tracking-widest">Buscar</Label>
                  <Input id="q" value={q} onChange={(e) => setQ(e.target.value)} placeholder="Ej. white, oxford..." className="rounded-none" />
                </div>
                <div className="mb-4">
                  <PriceRange min={minPrice} max={maxPrice} value={priceRange} onChange={setPriceRange} />
                </div>
                <div className="grid gap-2 mb-6">
                  <Label className="text-xs uppercase tracking-widest">Ordenar</Label>
                  <Select value={sort} onValueChange={setSort}>
                    <SelectTrigger className="h-9"><SelectValue placeholder="Relevancia" /></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="relevance">Relevancia</SelectItem>
                      <SelectItem value="price-asc">Precio: menor a mayor</SelectItem>
                      <SelectItem value="price-desc">Precio: mayor a menor</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                {/* Rest of sidebar content (colors, fabrics, etc.) */}
              </aside>
              <div>
                <div className="flex items-center justify-between">
                  <div>
                    <h2 className="text-xl md:text-2xl tracking-tight" style={{ color: "#262b33" }}>Nuevos esenciales</h2>
                    <div className="mt-2 h-0.5 w-12" style={{ backgroundColor: "#ea6f49" }} />
                  </div>
                  <Link href="/products" className="text-sm hover:underline underline-offset-4" style={{ color: "#4377b0" }}>
                    Comprar ahora
                  </Link>
                </div>
                <div className="grid sm:grid-cols-2 lg:grid-cols-4 gap-6">
                  {filtered.slice(0, 4).map((p) => (
                    <ProductCard key={p.id} product={p} />
                  ))}
                </div>
              </div>
            </div>
          </section>

          <HowItWorks />
          <ValueProps />

          {/* Banda servicios */}
          <section className="relative">
            <div className="relative aspect-[21/9] w-full overflow-hidden bg-muted">
              <Image src="/images/hero-2.png" alt="Servicios de diseño Inkspire Studio" fill className="object-cover" />
              <div className="absolute inset-0" style={{ background: "rgba(38,43,51,0.5)" }} />
              <div className="absolute inset-0 flex items-center">
                <div className="container mx-auto px-4">
                  <div className="max-w-2xl text-white grid gap-4">
                    <h3 className="text-2xl md:text-3xl font-light">¿Necesitas un diseño a medida?</h3>
                    <p className="text-sm md:text-base text-white/85">
                      Nuestro equipo te ayuda con branding, ilustración y piezas listas para imprimir.
                    </p>
                    <Link href="/services">
                      <Button className="rounded-none h-11 px-8" style={{ backgroundColor: "#4377b0", color: "#ffffff" }}>
                        Solicitar cotización
                      </Button>
                    </Link>
                  </div>
                </div>
              </div>
            </div>
          </section>

          {/* Ubicación, testimonios, grid, newsletter, FAQ */}
          <LocationSection />
          <Testimonials />
          <InstagramGrid />
          <NewsletterForm />
          <FAQ />
        </main>
        <SiteFooter />
      </div>
      <WhatsAppFab />
    </CartProvider>
  )
}
"use client"

import Image from "next/image"
import Link from "next/link"

type Tile =
  | { type: "image"; src: string; alt: string }
  | { type: "link"; src: string; alt: string; href: string; label: string; kicker?: string }

type Props = {
  tiles: Tile[]
  title?: string
  subtitle?: string
}

export default function EditorialGrid({
  tiles,
  title = "Exhibición · Edición 01",
  subtitle = "Una curaduría de prendas como arte",
}: Props) {
  return (
    <section aria-label="Exhibición editorial" className="bg-white">
      <div className="container mx-auto px-4 py-12 grid gap-6">
        <header className="grid gap-2">
          <h2 className="text-xl md:text-2xl tracking-tight" style={{ color: "#262b33" }}>
            {title}
          </h2>
          <p className="text-sm" style={{ color: "#6a5d86" }}>{subtitle}</p>
          <div className="h-0.5 w-12" style={{ backgroundColor: "#ea6f49" }} />
        </header>
        <div className="grid grid-cols-2 md:grid-cols-6 auto-rows-[10px] gap-4">
          {tiles.map((t, i) => {
            const spans =
              i % 8 === 0
                ? "md:col-span-3 md:row-span-[24]"
                : i % 5 === 0
                ? "md:col-span-2 md:row-span-[18]"
                : "md:col-span-1 md:row-span-[12]"

            return (
              <div
                key={i}
                className={`relative col-span-2 ${spans} overflow-hidden rounded-md bg-white ring-1`}
                style={{ borderColor: "#cdcbcc" as any }}
              >
                {t.type === "image" ? (
                  <>
                    <Image src={t.src || "/placeholder.svg"} alt={t.alt} fill className="object-cover" />
                    <div className="absolute inset-0 bg-gradient-to-t from-[#262b33]/20 to-transparent" />
                  </>
                ) : (
                  <Link href={t.href} className="group block w-full h-full">
                    <Image
                      src={t.src || "/placeholder.svg"}
                      alt={t.alt}
                      fill
                      className="object-cover transition-transform duration-700 group-hover:scale-[1.03]"
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-[#262b33]/50 via-[#262b33]/20 to-transparent" />
                    <div className="absolute bottom-0 left-0 p-4">
                      {t.kicker ? (
                        <div className="text-xs uppercase tracking-widest" style={{ color: "#ea6f49" }}>
                          {t.kicker}
                        </div>
                      ) : null}
                      <div className="text-base font-medium text-white drop-shadow-sm">{t.label}</div>
                    </div>
                    <div
                      className="absolute inset-0 pointer-events-none opacity-0 group-hover:opacity-100 transition-opacity"
                      style={{ boxShadow: "inset 0 0 0 3px rgba(234,111,73,0.45)" }}
                    />
                  </Link>
                )}
              </div>
            )
          })}
        </div>
      </div>
    </section>
  )
}
"use client"

import Image from "next/image"
import Link from "next/link"
  import SiteHeader from "@/components/site-header"
  import SiteFooter from "@/components/site-footer"
  import CategorySpotlight from "@/components/category-spotlight"
  import EditorialGrid from "@/components/editorial-grid"
  import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
  import ProductCard from "@/components/product-card"
  import { CartProvider } from "@/components/cart"
  import { categories } from "@/lib/categories"
  import { products } from "@/lib/data"
import { useEffect } from "react"
import { useSearchParams, useRouter } from "next/navigation"

  const TABS = [
    { key: "all", label: "Todo" },
    { key: "camisas", label: "Camisas" },
    { key: "hoodies", label: "Hoodies" },
    { key: "anime", label: "Anime" },
    { key: "carros", label: "Carros" },
    { key: "tipografia", label: "Tipografía" },
  ] as const

  export default function CollectionPage() {
    const topCats = categories.slice(0, 3)

    const tiles = [
      { type: "link", src: "/images/categories/camisas.png", alt: "Camisas", href: "/categories/camisas", label: "Camisas", kicker: "Capítulo" },
      { type: "image", src: "/lookbook-inkspire-1.png", alt: "Editorial 1" },
      { type: "link", src: "/images/categories/hoodies.png", alt: "Hoodies", href: "/categories/hoodies", label: "Hoodies", kicker: "Capítulo" },
      { type: "image", src: "/lookbook-inkspire-2.png", alt: "Editorial 2" },
      { type: "link", src: "/images/categories/anime.png", alt: "Anime", href: "/categories/anime", label: "Anime", kicker: "Temática" },
      { type: "image", src: "/lookbook-inkspire-3.png", alt: "Editorial 3" },
      { type: "link", src: "/images/categories/cars.png", alt: "Carros", href: "/categories/carros", label: "Carros", kicker: "Temática" },
      { type: "image", src: "/lookbook-inkspire-4.png", alt: "Editorial 4" },
    ] as const

    return (
      <CartProvider>
        <div className="flex min-h-[100dvh] flex-col bg-white">
          <SiteHeader />
          <main className="flex-1">
            {/* Hero curatorial */}
            <section className="relative">
              <div className="relative aspect-[16/7] w-full overflow-hidden bg-muted">
                <Image
                  src="/images/hero-2.png"
                  alt="Colección Inkspire — Exposición de prendas"
                  fill
                  priority
                  className="object-cover"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-[#262b33]/60 via-[#262b33]/20 to-transparent" />
                <div className="absolute inset-0 flex items-end">
                  <div className="container mx-auto px-4 py-10 md:py-16">
                    <div className="max-w-2xl text-white grid gap-4">
                      <div className="text-xs uppercase tracking-widest opacity-90" style={{ color: "#cdcbcc" }}>Colección</div>
                      <h1 className="text-3xl md:text-5xl font-light tracking-tight">
                        Prendas como arte
                      </h1>
                      <p className="text-sm md:text-base text-white/85">
                        Una selección curada de camisas y hoodies. Capítulos y temáticas que celebran el diseño.
                      </p>
                      <div className="flex gap-4">
                        <Link href="/customize" className="underline underline-offset-4" style={{ textDecorationColor: "#ea6f49" }}>
                          Personalizar
                        </Link>
                        <Link href="/categories" className="underline underline-offset-4" style={{ textDecorationColor: "#4377b0" }}>
                          Ver categorías
                        </Link>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </section>

            {/* Capítulos: categorías en gran formato */}
            <CategorySpotlight
              categories={topCats}
              title="Capítulos"
              subtitle="Camisas, Hoodies y Temáticas seleccionadas"
            />

            {/* Exhibición editorial (mosaico con paleta) */}
            <EditorialGrid tiles={tiles as any} />

            {/* Lookbook horizontal con paleta */}
            <section aria-label="Lookbook" className="bg-white">
              <div className="container mx-auto px-4 py-12 grid gap-6">
                <header className="grid gap-2">
                  <h2 className="text-xl md:text-2xl tracking-tight" style={{ color: "#262b33" }}>Lookbook</h2>
                  <p className="text-sm" style={{ color: "#6a5d86" }}>Explora la colección en formato editorial</p>
                  <div className="h-0.5 w-12" style={{ backgroundColor: "#ea6f49" }} />
                </header>
                <div className="overflow-x-auto">
                  <div className="flex gap-4 snap-x snap-mandatory">
                    {[
                      "/lookbook-inkspire-1.png",
                      "/lookbook-inkspire-2.png",
                      "/lookbook-inkspire-3.png",
                      "/lookbook-inkspire-4.png",
                      "/lookbook-inkspire-5.png",
                      "/lookbook-inkspire-6.png",
                    ].map((src, i) => (
                      <div
                        key={i}
                        className="relative snap-center w-[70vw] sm:w-[40vw] lg:w-[28vw] aspect-[3/4] rounded-md overflow-hidden bg-white ring-1"
                        style={{ borderColor: "#cdcbcc" as any }}
                      >
                        <Image src={src || "/placeholder.svg"} alt={`Lookbook ${i + 1}`} fill className="object-cover" />
                        <div className="absolute inset-0 bg-gradient-to-t from-[#262b33]/25 to-transparent" />
                        <div className="absolute bottom-2 left-2 h-1 w-8" style={{ backgroundColor: i % 2 === 0 ? "#4377b0" : "#ea6f49" }} />
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </section>

            {/* Productos por categoría (Tabs con paleta) */}
            <section aria-label="Piezas destacadas" className="bg-white">
              <div className="container mx-auto px-4 py-12 grid gap-6">
                <header className="grid gap-2">
                  <h2 className="text-xl md:text-2xl tracking-tight" style={{ color: "#262b33" }}>Piezas destacadas</h2>
                  <p className="text-sm" style={{ color: "#6a5d86" }}>Filtra por tipo o temática</p>
                </header>

                <Tabs defaultValue="all" className="w-full">
                  <TabsList className="grid w-full grid-cols-6 rounded-none bg-white border data-[state=active]:bg-transparent"
                    style={{ borderColor: "#cdcbcc" as any }}
                  >
                    {TABS.map((t) => (
                      <TabsTrigger
                        key={t.key}
                        value={t.key}
                        className="rounded-none text-xs md:text-sm border transition-colors data-[state=active]:text-white hover:bg-[#cdcbcc]/30 focus-visible:ring-2"
                        style={{
                          borderColor: "#cdcbcc",
                          color: "#262b33",
                        }}
                        // Nota: Tailwind permite valores arbitrarios; usamos clases para el estado activo
                      >
                        <span className="block data-[state=active]:hidden">{t.label}</span>
                        <span className="hidden data-[state=active]:block px-2 py-0.5 rounded-sm"
                              style={{ backgroundColor: "#262b33" }}>
                          {t.label}
                        </span>
                      </TabsTrigger>
                    ))}
                  </TabsList>

                  {TABS.map((t) => {
                    const list = t.key === "all" ? products : products.filter((p) => (p.tags ?? []).includes(t.key))
                    return (
                      <TabsContent key={t.key} value={t.key} className="mt-6">
                        <div className="grid sm:grid-cols-2 lg:grid-cols-4 gap-6">
                          {list.map((p) => (
                            <ProductCard key={p.id} product={p} />
                          ))}
                          {list.length === 0 && (
                            <p className="text-sm" style={{ color: "#6a5d86" }}>No hay piezas en esta categoría por ahora.</p>
                          )}
                        </div>
                      </TabsContent>
                    )
                  })}
                </Tabs>
              </div>
            </section>
          </main>
          <SiteFooter />
        </div>
      </CartProvider>
    )
  }
"use client"

import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Input } from "@/components/ui/input"
import { useEffect, useState } from "react"
import { Button } from "@/components/ui/button"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { usePathname, useRouter, useSearchParams } from "next/navigation"

interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[]
  data: TData[]
  pageParamKey?: string
  perPageParamKey?: string
  initialPageSize?: number
}

export function PaginatedGrid<TData, TValue>({
  columns,
  data,
  pageParamKey = "page",
  perPageParamKey = "per_page",
  initialPageSize = 24,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = useState<SortingState>([])
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([])
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({})
  const [rowSelection, setRowSelection] = useState({})
  const [perPage, setPerPage] = useState(initialPageSize)
  const searchParams = useSearchParams()
  const pathname = usePathname()
  const router = useRouter()

  const page = Number(searchParams.get(pageParamKey) || 1)

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    onSortingChange: setSorting,
    getSortedRowModel: getSortedRowModel(),
    onColumnFiltersChange: setColumnFilters,
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
  })

  useEffect(() => {
    const params = new URLSearchParams(searchParams.toString())
    if (perPage !== initialPageSize) params.set(perPageParamKey, String(perPage))
    else params.delete(perPageParamKey)
    router.replace(`${pathname}?${params.toString()}`)
  }, [perPage, pathname, router, searchParams, pageParamKey, perPageParamKey, initialPageSize])

  useEffect(() => {
    // Build from current URL to preserve other params (e.g. q, audiencia)
    const params = new URLSearchParams(typeof window !== "undefined" ? window.location.search : "")
    if (page > 1) params.set(pageParamKey, String(page))
    else params.delete(pageParamKey)

    if (perPage !== initialPageSize) params.set(perPageParamKey, String(perPage))
    else params.delete(perPageParamKey)

    const nextUrl = `${pathname}${params.toString() ? `?${params}` : ""}`
    const currentUrl = typeof window !== "undefined" ? `${window.location.pathname}${window.location.search}` : ""

    if (nextUrl !== currentUrl) {
      window.history.replaceState(null, "", nextUrl)
    }
  }, [page, perPage, pathname, pageParamKey, perPageParamKey, initialPageSize])

  return (
    <div className="w-full">
      <div className="flex items-center py-4">
        <Input
          placeholder="Filtrar columnas..."
          value={(table.getColumn(table.getAllColumns()[0].id)?.getFilterValue() as string) ?? ""}
          onChange={(event) =>
            table.getColumn(table.getAllColumns()[0].id)?.setFilterValue(event.target.value)
          }
          className="max-w-sm"
        />
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" className="ml-auto bg-transparent">
              Columnas
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            {table
              .getAllColumns()
              .filter((column) => column.getCanHide())
              .map((column) => {
                return (
                  <DropdownMenuCheckboxItem
                    key={column.id}
                    checked={column.getIsVisible()}
                    onCheckedChange={(value) => column.toggleVisibility(value)}
                  >
                    {column.id}
                  </DropdownMenuCheckboxItem>
                )
              })}
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => {
                  return (
                    <TableHead key={header.id}>
                      {header.isPlaceholder
                        ? null
                        : (
                          <div
                            onClick={header.column.getToggleSortingHandler()}
                            className="cursor-pointer"
                          >
                            {flexRender(
                              header.column.columnDef.header,
                              header.getContext()
                            )}
                            {{
                              ascending: "▲",
                              descending: "▼",
                            }[header.column.getIsSorted() as string] ?? null}
                          </div>
                        )}
                    </TableHead>
                  )
                })}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows.map((row) => (
              <TableRow key={row.id}>
                {row.getVisibleCells().map((cell) => (
                  <TableCell key={cell.id}>
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </TableCell>
                ))}
              </TableRow>
            ))}
            {table.getRowModel().rows.length === 0 ? (
              <TableRow>
                <TableCell colSpan={columns.length} className="text-center">
                  No se encontraron resultados.
                </TableCell>
              </TableRow>
            ) : null}
          </TableBody>
        </Table>
      </div>
      <div className="flex items-center justify-between space-x-2 py-2">
        <Select value={String(perPage)} onValueChange={(v) => setPerPage(Number(v))}>
          <SelectTrigger>
            <SelectValue placeholder="Resultados por página" />
          </SelectTrigger>
          <SelectContent>
            {[10, 24, 48, 96].map((n) => (
              <SelectItem key={n} value={String(n)}>{n}</SelectItem>
            ))}
          </SelectContent>
        </Select>
        <div className="flex-1 text-sm text-muted-foreground">
          {table.getFilteredRowModel().rows.length} de {data.length} resultados
        </div>
        <div className="space-x-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.setPageIndex(0)}
            disabled={!table.getCanPreviousPage()}
          >
            Primera
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
          >
            Anterior
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
          >
            Siguiente
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.setPageIndex(table.getPageCount() - 1)}
            disabled={!table.getCanNextPage()}
          >
            Última
          </Button>
        </div>
      </div>
    </div>
  )
}
"use client"

import { Product } from "@/lib/data"
import { PaginatedGrid } from "@/components/paginated-grid"
import { ColumnDef } from "@tanstack/react-table"
import { formatCurrency } from "@/lib/utils"

interface Props {
  products: Product[]
}

export default function ProductTable({ products }: Props) {
  const columns: ColumnDef<Product>[] = [
    {
      accessorKey: "name",
      header: "Nombre",
    },
    {
      accessorKey: "price",
      header: "Precio",
      cell: ({ row }) => formatCurrency(row.getValue("price")),
    },
    {
      accessorKey: "category",
      header: "Categoría",
    },
    {
      accessorKey: "tags",
      header: "Tags",
      cell: ({ row }) => (row.getValue("tags") ?? []).join(", "),
    },
  ]

  return (
    <PaginatedGrid columns={columns} data={products} />
  )
}
"use client"

import { ProductTable } from "@/components/product-table"
import { products } from "@/lib/data"
import { Metadata } from "next"
import { notFound } from "next/navigation"
import { Category } from "@/lib/categories"
import { CategorySpotlight } from "@/components/category-spotlight"
import { SiteHeader } from "@/components/site-header"
import SiteFooter from "@/components/site-footer"
import { CartProvider } from "@/components/cart"
import { useEffect, useState, useMemo } from "react"
import { useSearchParams, useRouter, usePathname } from "next/navigation"
import PriceRange from "@/components/price-range"
import WhatsAppFab from "@/components/whatsapp-fab"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

interface Props {
  params: { slug: string }
  searchParams: { q?: string; audiencia?: string; sort?: string }
}

export async function generateMetadata({ params }: { params: { slug: string } }): Promise<Metadata> {
  return {
    title: `Categoría: ${params.slug}`,
  }
}

async function getCategory(slug: string): Promise<Category | undefined> {
  const { categories } = await import("@/lib/categories")
  return categories.find((c) => c.slug === slug)
}

export default async function CategoryPage({ params, searchParams }: Props) {
  const { slug } = params
  const { q, audiencia, sort } = searchParams

  const category = await getCategory(slug)
  if (!category) {
    return notFound()
  }

  const baseItems = products.filter((p) => p.category === category.title)

  const [minPrice, maxPrice] = useMemo(() => {
    if (baseItems.length === 0) return [0, 0]
    const prices = baseItems.map((p) => p.price)
    return [Math.min(...prices), Math.max(...prices)]
  }, [baseItems])
  const [priceRange, setPriceRange] = useState<[number, number]>([minPrice, maxPrice])
  useEffect(() => { setPriceRange([minPrice, maxPrice]) }, [minPrice, maxPrice])

  const [colors, setColors] = useState<string[]>([])
  const [fabrics, setFabrics] = useState<string[]>([])

  const filteredItems = useMemo(() => {
    let items = [...baseItems]
    if (colors.length > 0) items = items.filter((p) => p.colors.some((c) => colors.includes(c)))
    if (fabrics.length > 0) items = items.filter((p) => p.fabrics.some((f) => fabrics.includes(f)))
    items = items.filter((p) => p.price >= priceRange[0] && p.price <= priceRange[1])
    return items
  }, [baseItems, colors, fabrics, priceRange])

  const topCats = []

    const pathname = usePathname()

    useEffect(() => {
      const params = new URLSearchParams()
      if (q) params.set("q", q)
      if (audiencia) params.set("audiencia", audiencia)
      if (sort && sort !== "relevance") params.set("sort", sort)

      const nextUrl = `${pathname}${params.toString() ? `?${params}` : ""}`
      const currentUrl = typeof window !== "undefined" ? `${window.location.pathname}${window.location.search}` : ""

      if (nextUrl !== currentUrl) {
        window.history.replaceState(null, "", nextUrl)
      }
    }, [q, audiencia, sort, pathname])

  return (
    <CartProvider>
      <div className="flex min-h-[100dvh] flex-col bg-white">
        <SiteHeader />
        <main className="flex-1">
          <section className="relative">
            <div className="relative aspect-[16/7] w-full overflow-hidden bg-muted">
              <img
                src={category.image || "/placeholder.svg"}
                alt={category.title}
                fill
                className="object-cover"
                style={{ objectPosition: "top" }}
              />
              <div className="absolute inset-0 bg-gradient-to-t from-[#262b33]/60 via-[#262b33]/20 to-transparent" />
              <div className="absolute inset-0 flex items-end">
                <div className="container mx-auto px-4 py-10 md:py-16">
                  <div className="max-w-2xl text-white grid gap-4">
                    <div className="text-xs uppercase tracking-widest opacity-90" style={{ color: "#cdcbcc" }}>Capítulo</div>
                    <h1 className="text-3xl md:text-5xl font-light tracking-tight">
                      {category.title}
                    </h1>
                    {category.description ? (
                      <p className="text-sm md:text-base text-white/85">
                        {category.description}
                      </p>
                    ) : null}
                    <div className="flex gap-4">
                      <a href="/customize" className="underline underline-offset-4" style={{ textDecorationColor: "#ea6f49" }}>
                        Personalizar
                      </a>
                      <a href="/collection" className="underline underline-offset-4" style={{ textDecorationColor: "#4377b0" }}>
                        Ver colección
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>

          {/* Capítulos: categorías en gran formato */}
          <CategorySpotlight
            categories={topCats}
            title="Más capítulos"
            subtitle="Explora otras categorías"
          />

          {/* Listado de productos */}
          <section aria-label="Piezas destacadas" className="bg-white">
            <div className="container mx-auto px-4 py-12 grid gap-6">
              <header className="grid gap-2">
                <h2 className="text-xl md:text-2xl tracking-tight" style={{ color: "#262b33" }}>Piezas destacadas</h2>
                <p className="text-sm" style={{ color: "#6a5d86" }}>Filtrar y ordenar</p>
              </header>
              <ProductTable products={filteredItems} />
            </div>
          </section>
        </main>
        <SiteFooter />
      </div>
      <WhatsAppFab />
    </CartProvider>
  )
}
"use client"

import Image from "next/image"
import Link from "next/link"
import SiteHeader from "@/components/site-header"
import SiteFooter from "@/components/site-footer"
import ProductCard from "@/components/product-card"
import { Button } from "@/components/ui/button"
import { products, Product } from "@/lib/data"
import { CartProvider } from "@/components/cart"
import FeatureStrip from "@/components/feature-strip"
import BrandGrid from "@/components/brand-grid"
import HowItWorks from "@/components/how-it-works"
import Testimonials from "@/components/testimonials"
import NewsletterForm from "@/components/newsletter-form"
import InstagramGrid from "@/components/instagram-grid"
import { categories } from "@/lib/categories"
import LocationSection from "@/components/location-section"
import FAQ from "@/components/faq"
import ValueProps from "@/components/value-props"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import PriceRange from "@/components/price-range"
import WhatsAppFab from "@/components/whatsapp-fab"
import RecentlyViewed from "@/components/recently-viewed"

export default async function Page({ params }: { params: { slug: string } }) {
  const product = products.find((p) => p.slug === params.slug)

  if (!product) {
    return notFound()
  }

  return (
    <CartProvider>
      <div className="flex min-h-[100dvh] flex-col bg-white">
        <SiteHeader />
        <main className="flex-1">
          {/* Hero */}
          <section className="relative">
            <div className="relative aspect-[21/9] w-full overflow-hidden bg-muted">
              <Image
                src="/images/hero-1.png"
                alt="Inkspire Studio - personalización premium"
                fill
                priority
                className="object-cover"
              />
              <div className="absolute inset-0" style={{ background: "linear-gradient(0deg, rgba(38,43,51,0.7), rgba(255,255,255,0.08) 50%, transparent)" }} />
              <div className="absolute inset-0 flex items-end">
                <div className="container mx-auto px-4 py-12 md:py-16">
                  <div className="max-w-xl grid gap-4">
                    <h1 className="text-3xl md:text-5xl font-light tracking-tight text-white">
                      Inkspire Studio — Personaliza tu estilo
                    </h1>
                    <p className="text-sm md:text-base text-white/85">
                      Camisas y hoodies personalizados con calidad de estudio. Diseña, aprueba y recibe en casa.
                    </p>
                    <div className="flex gap-3">
                      <Link href="/customize">
                        <Button
                          className="rounded-none h-11 px-8"
                          style={{ backgroundColor: "#ea6f49", color: "#ffffff" }}
                        >
                          Personalizar ahora
                        </Button>
                      </Link>
                      <Link href="/products">
                        <Button
                          variant="outline"
                          className="rounded-none h-11 px-8 bg-transparent"
                          style={{ borderColor: "#262b33", color: "#262b33", backgroundColor: "transparent" }}
                          onMouseEnter={(e) => {
                            e.currentTarget.style.backgroundColor = "rgba(205,203,204,0.3)"
                          }}
                          onMouseLeave={(e) => {
                            e.currentTarget.style.backgroundColor = "transparent"
                          }}
                        >
                          Ver colección
                        </Button>
                      </Link>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>

          <FeatureStrip />
          <BrandGrid />

          {/* Categorías destacadas */}
          <section className="container mx-auto px-4 py-12 md:py-16 grid gap-6">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-xl md:text-2xl tracking-tight" style={{ color: "#262b33" }}>Compra por categoría</h2>
                <div className="mt-2 h-0.5 w-12" style={{ backgroundColor: "#ea6f49" }} />
              </div>
              <Link href="/categories" className="text-sm hover:underline underline-offset-4" style={{ color: "#4377b0" }}>
                Ver todas
              </Link>
            </div>
            <div className="grid md:grid-cols-3 gap-6">
              {categories.map((cat) => (
                <Link key={cat.slug} href={`/categories/${cat.slug}`} className="group relative overflow-hidden rounded-md">
                  <div className="relative aspect-[16/9] w-full">
                    <Image src={cat.image || "/placeholder.svg?height=900&width=1600&query=categoria"} alt={cat.title} fill className="object-cover" />
                  </div>
                  <div className="absolute inset-0" style={{ background: "linear-gradient(0deg, rgba(38,43,51,0.6), transparent)" }} />
                  <div className="absolute bottom-0 left-0 p-6 text-white tracking-wide">
                    <div className="text-sm uppercase">{cat.title}</div>
                    {cat.description ? <div className="font-medium">{cat.description}</div> : null}
                  </div>
                </Link>
              ))}
            </div>
          </section>

          {/* Productos */}
          <section className="container mx-auto px-4 py-12 md:py-16 grid gap-6">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-xl md:text-2xl tracking-tight" style={{ color: "#262b33" }}>Nuevos esenciales</h2>
                <div className="mt-2 h-0.5 w-12" style={{ backgroundColor: "#ea6f49" }} />
              </div>
              <Link href="/products" className="text-sm hover:underline underline-offset-4" style={{ color: "#4377b0" }}>
                Comprar ahora
              </Link>
            </div>
            <div className="grid sm:grid-cols-2 lg:grid-cols-4 gap-6">
              {products.slice(0, 4).map((p) => (
                <ProductCard key={p.id} product={p} />
              ))}
            </div>
          </section>

          <HowItWorks />
          <ValueProps />

          {/* Banda servicios */}
          <section className="relative">
            <div className="relative aspect-[21/9] w-full overflow-hidden bg-muted">
              <Image src="/images/hero-2.png" alt="Servicios de diseño Inkspire Studio" fill className="object-cover" />
              <div className="absolute inset-0" style={{ background: "rgba(38,43,51,0.5)" }} />
              <div className="absolute inset-0 flex items-center">
                <div className="container mx-auto px-4">
                  <div className="max-w-2xl text-white grid gap-4">
                    <h3 className="text-2xl md:text-3xl font-light">¿Necesitas un diseño a medida?</h3>
                    <p className="text-sm md:text-base text-white/85">
                      Nuestro equipo te ayuda con branding, ilustración y piezas listas para imprimir.
                    </p>
                    <Link href="/services">
                      <Button className="rounded-none h-11 px-8" style={{ backgroundColor: "#4377b0", color: "#ffffff" }}>
                        Solicitar cotización
                      </Button>
                    </Link>
                  </div>
                </div>
              </div>
            </div>
          </section>

          {/* Ubicación, testimonios, grid, newsletter, FAQ */}
          <LocationSection />
          <Testimonials />
          <InstagramGrid />
          <NewsletterForm />
          <FAQ />
          <script
            type="application/ld+json"
            // eslint-disable-next-line react/no-danger
            dangerouslySetInnerHTML={{
              __html: JSON.stringify({
                "@context": "https://schema.org/",
                "@type": "Product",
                name: product.title,
                image: product.images,
                description: product.description,
                brand: "Inkspire Studio",
                sku: product.slug,
                offers: {
                  "@type": "Offer",
                  priceCurrency: "EUR",
                  price: product.price,
                  availability: "https://schema.org/InStock",
                },
                category: product.category,
                color: product.colors?.[0],
                material: product.fabrics?.[0],
              }),
            }}
          />
          <RecentlyViewed currentSlug={product.slug} />
        </main>
        <SiteFooter />
      </div>
      <WhatsAppFab />
    </CartProvider>
  )
}
"use client"

import Image from "next/image"
import Link from "next/link"

type Tile =
  | { type: "image"; src: string; alt: string }
  | { type: "link"; src: string; alt: string; href: string; label: string; kicker?: string }

type Props = {
  tiles: Tile[]
  title?: string
  subtitle?: string
}

export default function EditorialGrid({
  tiles,
  title = "Exhibición · Edición 01",
  subtitle = "Una curaduría de prendas como arte",
}: Props) {
  return (
    <section aria-label="Exhibición editorial" className="bg-white">
      <div className="container mx-auto px-4 py-12 grid gap-6">
        <header className="grid gap-2">
          <h2 className="text-xl md:text-2xl tracking-tight" style={{ color: "#262b33" }}>
            {title}
          </h2>
          <p className="text-sm" style={{ color: "#6a5d86" }}>{subtitle}</p>
          <div className="h-0.5 w-12" style={{ backgroundColor: "#ea6f49" }} />
        </header>
        <div className="grid grid-cols-2 md:grid-cols-6 auto-rows-[10px] gap-4">
          {tiles.map((t, i) => {
            const spans =
              i % 8 === 0
                ? "md:col-span-3 md:row-span-[24]"
                : i % 5 === 0
                ? "md:col-span-2 md:row-span-[18]"
                : "md:col-span-1 md:row-span-[12]"

            return (
              <div
                key={i}
                className={`relative col-span-2 ${spans} overflow-hidden rounded-md bg-white ring-1`}
                style={{ borderColor: "#cdcbcc" as any }}
              >
                {t.type === "image" ? (
                  <>
                    <Image src={t.src || "/placeholder.svg"} alt={t.alt} fill className="object-cover" />
                    <div className="absolute inset-0 bg-gradient-to-t from-[#262b33]/20 to-transparent" />
                  </>
                ) : (
                  <Link href={t.href} className="group block w-full h-full">
                    <Image
                      src={t.src || "/placeholder.svg"}
                      alt={t.alt}
                      fill
                      className="object-cover transition-transform duration-700 group-hover:scale-[1.03]"
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-[#262b33]/50 via-[#262b33]/20 to-transparent" />
                    <div className="absolute bottom-0 left-0 p-4">
                      {t.kicker ? (
                        <div className="text-xs uppercase tracking-widest" style={{ color: "#ea6f49" }}>
                          {t.kicker}
                        </div>
                      ) : null}
                      <div className="text-base font-medium text-white drop-shadow-sm">{t.label}</div>
                    </div>
                    <div
                      className="absolute inset-0 pointer-events-none opacity-0 group-hover:opacity-100 transition-opacity"
                      style={{ boxShadow: "inset 0 0 0 3px rgba(234,111,73,0.45)" }}
                    />
                  </Link>
                )}
              </div>
            )
          })}
        </div>
      </div>
    </section>
  )
}
"use client"

import Image from "next/image"
import Link from "next/link"
  import SiteHeader from "@/components/site-header"
  import SiteFooter from "@/components/site-footer"
  import CategorySpotlight from "@/components/category-spotlight"
  import EditorialGrid from "@/components/editorial-grid"
  import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
  import ProductCard from "@/components/product-card"
  import { CartProvider } from "@/components/cart"
  import { categories } from "@/lib/categories"
  import { products } from "@/lib/data"
import { useEffect } from "react"
import { useSearchParams, useRouter } from "next/navigation"

  const TABS = [
    { key: "all", label: "Todo" },
    { key: "camisas", label: "Camisas" },
    { key: "hoodies", label: "Hoodies" },
    { key: "anime", label: "Anime" },
    { key: "carros", label: "Carros" },
    { key: "tipografia", label: "Tipografía" },
  ] as const

  export default function CollectionPage() {
    const topCats = categories.slice(0, 3)

    const tiles = [
      { type: "link", src: "/images/categories/camisas.png", alt: "Camisas", href: "/categories/camisas", label: "Camisas", kicker: "Capítulo" },
      { type: "image", src: "/lookbook-inkspire-1.png", alt: "Editorial 1" },
      { type: "link", src: "/images/categories/hoodies.png", alt: "Hoodies", href: "/categories/hoodies", label: "Hoodies", kicker: "Capítulo" },
      { type: "image", src: "/lookbook-inkspire-2.png", alt: "Editorial 2" },
      { type: "link", src: "/images/categories/anime.png", alt: "Anime", href: "/categories/anime", label: "Anime", kicker: "Temática" },
      { type: "image", src: "/lookbook-inkspire-3.png", alt: "Editorial 3" },
      { type: "link", src: "/images/categories/cars.png", alt: "Carros", href: "/categories/carros", label: "Carros", kicker: "Temática" },
      { type: "image", src: "/lookbook-inkspire-4.png", alt: "Editorial 4" },
    ] as const

    return (
      <CartProvider>
        <div className="flex min-h-[100dvh] flex-col bg-white">
          <SiteHeader />
          <main className="flex-1">
            {/* Hero curatorial */}
            <section className="relative">
              <div className="relative aspect-[16/7] w-full overflow-hidden bg-muted">
                <Image
                  src="/images/hero-2.png"
                  alt="Colección Inkspire — Exposición de prendas"
                  fill
                  priority
                  className="object-cover"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-[#262b33]/60 via-[#262b33]/20 to-transparent" />
                <div className="absolute inset-0 flex items-end">
                  <div className="container mx-auto px-4 py-10 md:py-16">
                    <div className="max-w-2xl text-white grid gap-4">
                      <div className="text-xs uppercase tracking-widest opacity-90" style={{ color: "#cdcbcc" }}>Colección</div>
                      <h1 className="text-3xl md:text-5xl font-light tracking-tight">
                        Prendas como arte
                      </h1>
                      <p className="text-sm md:text-base text-white/85">
                        Una selección curada de camisas y hoodies. Capítulos y temáticas que celebran el diseño.
                      </p>
                      <div className="flex gap-4">
                        <Link href="/customize" className="underline underline-offset-4" style={{ textDecorationColor: "#ea6f49" }}>
                          Personalizar
                        </Link>
                        <Link href="/categories" className="underline underline-offset-4" style={{ textDecorationColor: "#4377b0" }}>
                          Ver categorías
                        </Link>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </section>

            {/* Capítulos: categorías en gran formato */}
            <CategorySpotlight
              categories={topCats}
              title="Capítulos"
              subtitle="Camisas, Hoodies y Temáticas seleccionadas"
            />

            {/* Exhibición editorial (mosaico con paleta) */}
            <EditorialGrid tiles={tiles as any} />

            {/* Lookbook horizontal con paleta */}
            <section aria-label="Lookbook" className="bg-white">
              <div className="container mx-auto px-4 py-12 grid gap-6">
                <header className="grid gap-2">
                  <h2 className="text-xl md:text-2xl tracking-tight" style={{ color: "#262b33" }}>Lookbook</h2>
                  <p className="text-sm" style={{ color: "#6a5d86" }}>Explora la colección en formato editorial</p>
                  <div className="h-0.5 w-12" style={{ backgroundColor: "#ea6f49" }} />
                </header>
                <div className="overflow-x-auto">
                  <div className="flex gap-4 snap-x snap-mandatory">
                    {[
                      "/lookbook-inkspire-1.png",
                      "/lookbook-inkspire-2.png",
                      "/lookbook-inkspire-3.png",
                      "/lookbook-inkspire-4.png",
                      "/lookbook-inkspire-5.png",
                      "/lookbook-inkspire-6.png",
                    ].map((src, i) => (
                      <div
                        key={i}
                        className="relative snap-center w-[70vw] sm:w-[40vw] lg:w-[28vw] aspect-[3/4] rounded-md overflow-hidden bg-white ring-1"
                        style={{ borderColor: "#cdcbcc" as any }}
                      >
                        <Image src={src || "/placeholder.svg"} alt={`Lookbook ${i + 1}`} fill className="object-cover" />
                        <div className="absolute inset-0 bg-gradient-to-t from-[#262b33]/25 to-transparent" />
                        <div className="absolute bottom-2 left-2 h-1 w-8" style={{ backgroundColor: i % 2 === 0 ? "#4377b0" : "#ea6f49" }} />
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </section>

            {/* Productos por categoría (Tabs con paleta) */}
            <section aria-label="Piezas destacadas" className="bg-white">
              <div className="container mx-auto px-4 py-12 grid gap-6">
                <header className="grid gap-2">
                  <h2 className="text-xl md:text-2xl tracking-tight" style={{ color: "#262b33" }}>Piezas destacadas</h2>
                  <p className="text-sm" style={{ color: "#6a5d86" }}>Filtra por tipo o temática</p>
                </header>

                <Tabs defaultValue="all" className="w-full">
                  <TabsList className="grid w-full grid-cols-6 rounded-none bg-white border data-[state=active]:bg-transparent"
                    style={{ borderColor: "#cdcbcc" as any }}
                  >
                    {TABS.map((t) => (
                      <TabsTrigger
                        key={t.key}
                        value={t.key}
                        className="rounded-none text-xs md:text-sm border transition-colors data-[state=active]:text-white hover:bg-[#cdcbcc]/30 focus-visible:ring-2"
                        style={{
                          borderColor: "#cdcbcc",
                          color: "#262b33",
                        }}
                        // Nota: Tailwind permite valores arbitrarios; usamos clases para el estado activo
                      >
                        <span className="block data-[state=active]:hidden">{t.label}</span>
                        <span className="hidden data-[state=active]:block px-2 py-0.5 rounded-sm"
                              style={{ backgroundColor: "#262b33" }}>
                          {t.label}
                        </span>
                      </TabsTrigger>
                    ))}
                  </TabsList>

                  {TABS.map((t) => {
                    const list = t.key === "all" ? products : products.filter((p) => (p.tags ?? []).includes(t.key))
                    return (
                      <TabsContent key={t.key} value={t.key} className="mt-6">
                        <div className="grid sm:grid-cols-2 lg:grid-cols-4 gap-6">
                          {list.map((p) => (
                            <ProductCard key={p.id} product={p} />
                          ))}
                          {list.length === 0 && (
                            <p className="text-sm" style={{ color: "#6a5d86" }}>No hay piezas en esta categoría por ahora.</p>
                          )}
                        </div>
                      </TabsContent>
                    )
                  })}
                </Tabs>
              </div>
            </section>
          </main>
          <SiteFooter />
        </div>
      </CartProvider>
    )
  }
"use client"

import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Input } from "@/components/ui/input"
import { useEffect, useState } from "react"
import { Button } from "@/components/ui/button"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { usePathname, useRouter, useSearchParams } from "next/navigation"

interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[]
  data: TData[]
  pageParamKey?: string
  perPageParamKey?: string
  initialPageSize?: number
}

export function PaginatedGrid<TData, TValue>({
  columns,
  data,
  pageParamKey = "page",
  perPageParamKey = "per_page",
  initialPageSize = 24,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = useState<SortingState>([])
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([])
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({})
  const [rowSelection, setRowSelection] = useState({})
  const [perPage, setPerPage] = useState(initialPageSize)
  const searchParams = useSearchParams()
  const pathname = usePathname()
  const router = useRouter()

  const page = Number(searchParams.get(pageParamKey) || 1)

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    onSortingChange: setSorting,
    getSortedRowModel: getSortedRowModel(),
    onColumnFiltersChange: setColumnFilters,
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
  })

  useEffect(() => {
    const params = new URLSearchParams(searchParams.toString())
    if (perPage !== initialPageSize) params.set(perPageParamKey, String(perPage))
    else params.delete(perPageParamKey)
    router.replace(`${pathname}?${params.toString()}`)
  }, [perPage, pathname, router, searchParams, pageParamKey, perPageParamKey, initialPageSize])

  useEffect(() => {
    // Build from current URL to preserve other params (e.g. q, audiencia)
    const params = new URLSearchParams(typeof window !== "undefined" ? window.location.search : "")
    if (page > 1) params.set(pageParamKey, String(page))
    else params.delete(pageParamKey)

    if (perPage !== initialPageSize) params.set(perPageParamKey, String(perPage))
    else params.delete(perPageParamKey)

    const nextUrl = `${pathname}${params.toString() ? `?${params}` : ""}`
    const currentUrl = typeof window !== "undefined" ? `${window.location.pathname}${window.location.search}` : ""

    if (nextUrl !== currentUrl) {
      window.history.replaceState(null, "", nextUrl)
    }
  }, [page, perPage, pathname, pageParamKey, perPageParamKey, initialPageSize])

  return (
    <div className="w-full">
      <div className="flex items-center py-4">
        <Input
          placeholder="Filtrar columnas..."
          value={(table.getColumn(table.getAllColumns()[0].id)?.getFilterValue() as string) ?? ""}
          onChange={(event) =>
            table.getColumn(table.getAllColumns()[0].id)?.setFilterValue(event.target.value)
          }
          className="max-w-sm"
        />
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" className="ml-auto bg-transparent">
              Columnas
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            {table
              .getAllColumns()
              .filter((column) => column.getCanHide())
              .map((column) => {
                return (
                  <DropdownMenuCheckboxItem
                    key={column.id}
                    checked={column.getIsVisible()}
                    onCheckedChange={(value) => column.toggleVisibility(value)}
                  >
                    {column.id}
                  </DropdownMenuCheckboxItem>
                )
              })}
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => {
                  return (
                    <TableHead key={header.id}>
                      {header.isPlaceholder
                        ? null
                        : (
                          <div
                            onClick={header.column.getToggleSortingHandler()}
                            className="cursor-pointer"
                          >
                            {flexRender(
                              header.column.columnDef.header,
                              header.getContext()
                            )}
                            {{
                              ascending: "▲",
                              descending: "▼",
                            }[header.column.getIsSorted() as string] ?? null}
                          </div>
                        )}
                    </TableHead>
                  )
                })}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows.map((row) => (
              <TableRow key={row.id}>
                {row.getVisibleCells().map((cell) => (
                  <TableCell key={cell.id}>
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </TableCell>
                ))}
              </TableRow>
            ))}
            {table.getRowModel().rows.length === 0 ? (
              <TableRow>
                <TableCell colSpan={columns.length} className="text-center">
                  No se encontraron resultados.
                </TableCell>
              </TableRow>
            ) : null}
          </TableBody>
        </Table>
      </div>
      <div className="flex items-center justify-between space-x-2 py-2">
        <Select value={String(perPage)} onValueChange={(v) => setPerPage(Number(v))}>
          <SelectTrigger>
            <SelectValue placeholder="Resultados por página" />
          </SelectTrigger>
          <SelectContent>
            {[10, 24, 48, 96].map((n) => (
              <SelectItem key={n} value={String(n)}>{n}</SelectItem>
            ))}
          </SelectContent>
        </Select>
        <div className="flex-1 text-sm text-muted-foreground">
          {table.getFilteredRowModel().rows.length} de {data.length} resultados
        </div>
        <div className="space-x-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.setPageIndex(0)}
            disabled={!table.getCanPreviousPage()}
          >
            Primera
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={()
